{
  "Comment": "Stop AWS RDS and Aurora databases after the forced 7th-day start",
  "QueryLanguage": "JSONata",
  "TimeoutSeconds": ${StepFnTimeoutSecs},
  "StartAt": "AssignConstants",
  "States": {
    "AssignConstants": {
      "Type": "Pass",
      "Assign": {
        "TaskTimeoutSeconds": ${StepFnTaskTimeoutSecs},
        "WaitSeconds": ${StepFnWaitSecs}
      },
      "Next": "ParseEvent"
    },
    "ParseEvent": {
      "Type": "Pass",
      "Output": "{% {\n  'Date': $states.input.detail.Date,\n  'SourceIdentifier': $states.input.detail.SourceIdentifier,\n\n  /* Events have 'CLUSTER' (Aurora) or 'DB_INSTANCE' (RDS); take last word */\n  'SourceTypeWord': $split($states.input.detail.SourceType,'_')[-1]\n} %}",
      "Next": "Expired?"
    },
    "Expired?": {
      "Type": "Choice",
      "Default": "SourceTypeWord",
      "Choices": [
        {
          "Condition": "{% $toMillis($states.input.Date) < ( $millis() - ${StepFnTimeoutSecs} ) %}",
          "Next": "Fail"
        }
      ]
    },
    "SourceTypeWord": {
      "Type": "Choice",
      "Choices": [
        {
          "Condition": "{% 'CLUSTER' = $states.input.SourceTypeWord %}",
          "Next": "StopDBCluster"
        },
        {
          "Condition": "{% 'INSTANCE' = $states.input.SourceTypeWord %}",
          "Next": "StopDBInstance"
        }
      ]
    },
    "StopDBCluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:stopDBCluster",
      "Arguments": {
        "DbClusterIdentifier": "{% $states.input.SourceIdentifier %}"
      },
      "TimeoutSeconds": "{% $TaskTimeoutSeconds %}",
      "Catch": [
        {
          "ErrorEquals": [
            "Rds.InvalidDbClusterStateException"
          ],
          "Assign": {
            "DbClusterStatusRegExpMatch": "{% $match($states.errorOutput.Cause, /^DbCluster [^ ]+ is in (.+) state/, 1) %}"
          },
          "Output": "{% $states.input %}",
          "Next": "DbClusterStatusRegExpMatch"
        },
        {
          "Comment": "Until each cluster member becomes available",
          "ErrorEquals": [
            "Rds.InvalidDbInstanceStateException"
          ],
          "Output": "{% $states.input %}",
          "Next": "Wait"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Output": "{% $states.input %}",
          "Next": "Wait"
        }
      ],
      "Output": "{% $states.input %}",
      "Next": "Wait"
    },
    "DbClusterStatusRegExpMatch": {
      "Type": "Choice",
      "Choices": [
        {
          "Condition": "{% null = $DbClusterStatusRegExpMatch %}",
          "Next": "Wait"
        }
      ],
      "Output": "{% $merge([$states.input, {'DbStatus': $lowercase($DbClusterStatusRegExpMatch.groups[0])}]) %}",
      "Default": "DbStatus"
    },
    "StopDBInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:stopDBInstance",
      "Arguments": {
        "DbInstanceIdentifier": "{% $states.input.SourceIdentifier %}"
      },
      "TimeoutSeconds": "{% $TaskTimeoutSeconds %}",
      "Catch": [
        {
          "ErrorEquals": [
            "Rds.InvalidDbInstanceStateException"
          ],
          "Next": "DescribeDBInstances",
          "Output": "{% $states.input %}"
        },
        {
          "ErrorEquals": [
            "Rds.RdsException"
          ],
          "Next": "AuroraDbInstanceNotEligibleForStopping",
          "Output": "{% $states.input %}",
          "Assign": {
            "AuroraDbInstanceNotEligibleForStopping": "{% $contains($states.errorOutput.Cause, 'aurora') and $contains($states.errorOutput.Cause, 'not eligible for stopping') %}"
          },
          "Comment": "InvalidParameterCombination. Occurs only in test mode. RDS-EVENT-0088 database instance non-forced start is indistinguishable for RDS (accepted) and Aurora (rejected in favor of RDS-EVENT-0151 database cluster non-forced start)."
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Output": "{% $states.input %}",
          "Next": "Wait"
        }
      ],
      "Output": "{% $states.input %}",
      "Next": "Wait"
    },
    "AuroraDbInstanceNotEligibleForStopping": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Succeed",
          "Condition": "{% $AuroraDbInstanceNotEligibleForStopping %}"
        }
      ],
      "Default": "Fail"
    },
    "DescribeDBInstances": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Arguments": {
        "DbInstanceIdentifier": "{% $states.input.SourceIdentifier %}"
      },
      "TimeoutSeconds": "{% $TaskTimeoutSeconds %}",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Output": "{% $states.input %}",
          "Next": "Wait"
        }
      ],
      "Output": "{% $merge([$states.input, {'DbStatus': $states.result.DbInstances[0].DbInstanceStatus}]) %}",
      "Next": "DbStatus"
    },
    "DbStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Condition": "{% $states.input.DbStatus in ['inaccessible-encryption-credentials', 'cloning-failed', 'migration-failed', 'preparing-data-migration', 'failed', 'incompatible-restore', 'insufficient-capacity', 'restore-error', 'storage-full'] %}",
          "Next": "Fail"
        },
        {
          "Condition": "{% $states.input.DbStatus in ['stopped', 'deleting', 'deleted'] %}",
          "Next": "Succeed"
        }
      ],
      "Default": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": "{% $WaitSeconds %}",
      "Next": "SourceTypeWord"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Succeed": {
      "Type": "Succeed"
    }
  }
}
