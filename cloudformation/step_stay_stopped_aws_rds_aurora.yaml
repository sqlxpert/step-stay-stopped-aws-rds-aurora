---
AWSTemplateFormatVersion: "2010-09-09"

Description: |-
  Step Function to stop RDS and Aurora databases after the forced 7th-day start.
  github.com/sqlxpert/step-stay-stopped-aws-rds-aurora  GPLv3  Copyright Paul Marcelin

Parameters:

  PlaceholderSuggestedStackName:
    Type: String
    Default: "StepStayStoppedRdsAurora"

  PlaceholderSuggestedStackPolicyBody:
    Type: String
    Default: "https://github.com/sqlxpert/step-stay-stopped-aws-rds-aurora/blob/main/cloudformation/step_stay_stopped_aws_rds_aurora_policy.json?raw=true"

  PlaceholderHelp:
    Type: String
    Default: "github.com/sqlxpert/step-stay-stopped-aws-rds-aurora"

  Enable:
    Type: String
    Description: >-
      Whether to stop databases forcibly started after 7 days
    Default: "true"
    AllowedValues:
      - "false"
      - "true"

  FollowUntilStopped:
    Type: String
    Description: >-
      Whether to monitor after requesting that a database be stopped. The
      default, "true", provides a log entry if the stop request is not complete
      StepFnTimeoutSeconds (86400 seconds or 24 hours, by default) after AWS
      started the database. If someone starts the database manually after it
      enters "stopped" status but before the next and final retry, the database
      will be stopped another time. This window lasts StepFnWaitSeconds
      (540 seconds or 9 minutes, by default) and occurs every 7th day, but at
      an unpredictable time of day. Changing the value to "false" eliminates
      the conflict window, at the expense of the completion monitoring.
    Default: "true"
    AllowedValues:
      - "false"
      - "true"

  PlaceholderAdvancedParameters:
    Type: String
    Default: ""
    AllowedValues:
      - ""

  ExcludeTagKey:
    Type: String
    Description: >-
      An RDS database instance or Aurora database cluster with this tag will
      not be stopped.
      Specify only the tag key; tag values are ignored.
      If ExcludeTagKey and IncludeTagKey are both blank, the Step Function role
      has permission to stop any database (though the Step Function is only
      triggered for databases that have already been stopped for 7 days).
      The default is "StayStopped-Exclude".
      For tag key rules, see
      https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#Overview.Tagging.Structure
    Default: "StayStopped-Exclude"

  IncludeTagKey:
    Type: String
    Description: >-
      An RDS database instance or Aurora database cluster without this tag will
      not be stopped.
      By default, this is blank and no database tag is required.
      If a database has both the ExcludeTagKey and the IncludeTagKey, it will
      not be stopped; exclusion wins.
      See ExcludeTagKey for other important details.
    Default: ""

  Test:
    Type: String
    Description: >-
      Whether to add Aurora database cluster and RDS database instance
      non-forced start events for temporary testing.
      Tip:
      Temporarily reducing StepFnWaitSeconds and StepFnTimeoutSeconds , and
      changing LogLevel to "ALL", also facilitates testing.
      WARNING:
      Setting this to "true" causes any Aurora database cluster or RDS
      database instance to be stopped as soon as it is started.
    Default: "false"
    AllowedValues:
      - "false"
      - "true"

  MessageRetentionPeriodSeconds:
    Type: Number
    Description: >-
      How many seconds to keep error queue messages. For consistency, set this
      to LogRetentionInDays * 86400 or the next largest value allowed by both
      CloudWatch Logs and SQS. The default, 1209600 , is 14 days. See
      MessageRetentionPeriod in
      https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SetQueueAttributes.html#API_SetQueueAttributes_RequestParameters
    Default: 1209600

  MaximumMessageSizeBytes:
    Type: Number
    Description: >-
      The maximum number of bytes in a forced database start event and an AWS
      Step Function trigger event. The default, 32768 bytes, is 32 KiB. See
      MaximumMessageSize in
      https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html#API_CreateQueue_RequestParameters
    Default: 32768

  SqsKmsKey:
    Type: String
    Description: >-
      If this is blank, default non-KMS SQS encryption applies. To use the
      AWS-managed key (which does not support key policy restrictions, or
      cross-region or cross-account usage), specify "alias/aws/sqs". To use a
      custom key, specify "ACCOUNT:key/KEY_ID". Whether the custom key is a
      single-region key, a multi-region key primary, or a multi-region key
      replica, it must be in the same region where you are creating this
      stack. Even if the custom key is in the same AWS account as this stack,
      you must update the key policy to allow usage by EventBridge and SQS.
      See
      https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-targets.html#targets-permissions
      and
      https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-key-management.html#compatibility-with-aws-services
      . For a StackSet, if you wish to use a custom key, it must be
      multi-region ("mrk-" prefix in the KEY_ID), and a replica (or the
      primary key itself) must exist in every target region.
    Default: ""

  StepFnTaskTimeoutSeconds:
    Type: Number
    Description: >-
      How many seconds to wait for an AWS request, such as a StopDBCluster
      request, to return (not to complete). The default is 30 seconds. Increase
      this only in case of time-out errors.
    Default: 30

  StepFnWaitSeconds:
    Type: Number
    Description: >-
      How many seconds between attempts to stop a database. The default, 540
      seconds or 9 minutes, allows a second stop attempt as late as possible
      within the 10-minute minimum billing period after a database starts.
      Reduce for for testing.
    Default: 540

  StepFnTimeoutSeconds:
    Type: Number
    Description: >-
      For how many seconds to keep trying to stop a database. The default,
      86400 , is 24 hours.
      Reduce for for testing.
    Default: 86400

  StepFnKmsKey:
    Type: String
    Description: >-
      If this is blank, AWS Step Functions encrypts payload data with an
      AWS-owned KMS key . To use a custom key, specify "ACCOUNT:key/KEY_ID".
      Whether the custom key is a single-region key, a multi-region key
      primary, or a multi-region key replica, it must be in the same region
      where you are creating this stack. Even if the custom key is in the same
      AWS account as this stack, you must update the key policy to allow usage
      by AWS Step Functions. See
      https://docs.aws.amazon.com/step-functions/latest/dg/encryption-at-rest.html#encrypt-logs
      and
      https://docs.aws.amazon.com/step-functions/latest/dg/encryption-at-rest.html#create-state-machine
      . For a StackSet, the custom key must be multi-region ("mrk-" prefix in
      the KEY_ID), and a replica (or the primary key itself) must exist in
      every target region.
    Default: ""

  StepFnRoleAttachLocalPolicyName:
    Type: String
    Description: >-
      The name of a customer-managed IAM policy to attach to the Step Function
      role. By including "Effect": "Deny" statements, you could, for example,
      prevent the function from ever stopping production databases.
      Specify only the name, not the ARN.
      For a StackSet, the policy must exist, and have exactly the same name,
      in every target AWS account.
      Policies are account-wide, not regional.
    Default: ""

  LogRetentionInDays:
    Type: Number
    Description: >-
      How many days to keep log entries. Because AWS starts stopped RDS and
      Aurora databases after 7 days, set this to the next largest allowed
      value to preserve information about the previous round of database
      start events. See retentionInDays in
      https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html#API_PutRetentionPolicy_RequestParameters
    Default: 14

  IncludeExecutionDataInLog:
    Type: String
    Description: >-
      Whether to log Step Function execution data
    Default: "true"
    AllowedValues:
      - "false"
      - "true"

  LogLevel:
    Type: String
    Description: >-
      The level of detail in the log. See
      https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#cloudwatch-log-level
    Default: ERROR
    AllowedValues:
      - ALL
      - ERROR
      - FATAL
      - "OFF"

  CloudWatchLogsKmsKey:
    Type: String
    Description: >-
      If this is blank, default non-KMS CloudWatch Logs encryption applies. To
      use a KMS key, which must be a custom key, specify "ACCOUNT:key/KEY_ID".
      Whether the custom key is a single-region key, a multi-region key
      primary, or a multi-region key replica, it must be in the same region
      where you are creating this stack. Even if the custom key is in the same
      AWS account as this stack, you must update the key policy to allow usage
      by CloudWatch Logs. See
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html#cmk-permissions
      . For a StackSet, the custom key must be multi-region ("mrk-" prefix in
      the KEY_ID), and a replica (or the primary key itself) must exist in
      every target region.
    Default: ""

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: For Reference
        Parameters:
          - PlaceholderSuggestedStackName
          - PlaceholderSuggestedStackPolicyBody
          - PlaceholderHelp
      - Label:
          default: Essential
        Parameters:
          - Enable
          - FollowUntilStopped
      - Label:
          default: Advanced...
        Parameters:
          - PlaceholderAdvancedParameters
      - Label:
          default: Database tags
        Parameters:
          - ExcludeTagKey
          - IncludeTagKey
      - Label:
          default: Testing
        Parameters:
          - Test
      - Label:
          default: SQS queue for errors
        Parameters:
          - MessageRetentionPeriodSeconds
          - MaximumMessageSizeBytes
          - SqsKmsKey
      - Label:
          default: AWS Step Function to stop databases
        Parameters:
          - StepFnTaskTimeoutSeconds
          - StepFnWaitSeconds
          - StepFnTimeoutSeconds
          - StepFnKmsKey
          - StepFnRoleAttachLocalPolicyName
      - Label:
          default: CloudWatch log for AWS Step Function
        Parameters:
          - LogRetentionInDays
          - IncludeExecutionDataInLog
          - LogLevel
          - CloudWatchLogsKmsKey
    ParameterLabels:
      PlaceholderSuggestedStackName:
        default: Suggested stack name
      PlaceholderSuggestedStackPolicyBody:
        default: Copy suggested stack policy from
      PlaceholderHelp:
        default: For help with this stack, see
      Enable:
        default: Enable?
      FollowUntilStopped:
        default: Follow the database after a stop request?
      PlaceholderAdvancedParameters:
        default: Do not change the parameters below, unless necessary!
      ExcludeTagKey:
        default: Do not stop an eligible database if it has this tag
      IncludeTagKey:
        default: Stop an eligible database only if it has this tag
      Test:
        default: Test mode?
      MessageRetentionPeriodSeconds:
        default: Seconds before deleting a message
      MaximumMessageSizeBytes:
        default: Maximum bytes in a message
      SqsKmsKey:
        default: KMS encryption key
      StepFnTaskTimeoutSeconds:
        default: Maximum seconds for an AWS request
      StepFnWaitSeconds:
        default: Seconds between attempts to stop a database
      StepFnTimeoutSeconds:
        default: Maximum seconds to try stopping a database
      StepFnKmsKey:
        default: KMS encryption key
      StepFnRoleAttachLocalPolicyName:
        default: Name of local IAM policy to attach to role
      LogRetentionInDays:
        default: Days before deleting
      IncludeExecutionDataInLog:
        default: Include Step Function execution data?
      LogLevel:
        default: Level of detail
      CloudWatchLogsKmsKey:
        default: KMS encryption key

Conditions:

  EnableTrue: !Equals [ !Ref Enable, "true" ]

  FollowUntilStoppedTrue: !Equals [ !Ref FollowUntilStopped, "true" ]

  ExcludeTagKeySet: !Not [ !Equals [ !Ref ExcludeTagKey, "" ] ]
  IncludeTagKeySet: !Not [ !Equals [ !Ref IncludeTagKey, "" ] ]
  ExcludeTagKeySetOrIncludeTagKeySet:
    !Or [ !Condition ExcludeTagKeySet, !Condition IncludeTagKeySet ]

  TestTrue: !Equals [ !Ref Test, "true" ]

  SqsKmsKeyBlank: !Equals [ !Ref SqsKmsKey, "" ]
  SqsKmsKeyCustom:
    Fn::And:
      - !Not [ !Condition SqsKmsKeyBlank ]
      - !Not [ !Equals [ !Ref SqsKmsKey, "alias/aws/sqs" ] ]

  StepFnRoleAttachLocalPolicyNameBlank:
    !Equals [ !Ref StepFnRoleAttachLocalPolicyName, "" ]

  StepFnKmsKeyBlank: !Equals [ !Ref StepFnKmsKey, "" ]

  CloudWatchLogsKmsKeyBlank: !Equals [ !Ref CloudWatchLogsKmsKey, "" ]

Resources:

  # Administrator: Deny other AWS Step Function executions except when testing.
  ExecuteStepFnRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "For ${AWS::Region} region"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:

        - PolicyName: StepFnExecute
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt StepFn.Arn

        # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-key-management.html#send-to-encrypted-queue
        - Fn::If:
            - SqsKmsKeyCustom
            - PolicyName: SqsKmsEncryptNoteComplementsQueuePolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:GenerateDataKey
                      - kms:Decrypt  # To verify a new data key!
                    Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${SqsKmsKey}"
                    Condition:
                      StringEquals:
                        "kms:ViaService":
                          !Sub "sqs.${AWS::Region}.amazonaws.com"
            - !Ref AWS::NoValue

  StepFnRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "For ${AWS::Region} region"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: states.amazonaws.com }
            Action: sts:AssumeRole
            Condition:
              ArnEquals:
                "aws:SourceArn":
                  !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-StepFn"
      ManagedPolicyArns:
        - Fn::If:
            - StepFnRoleAttachLocalPolicyNameBlank
            - !Ref AWS::NoValue
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${StepFnRoleAttachLocalPolicyName}"
      Policies:

        # https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#cloudwatch-iam-policy
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-logs-infrastructure-CWL
        #
        # CloudWatch log delivery does not support resource-level permissions.
        # https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazoncloudwatchlogs.html#amazoncloudwatchlogs-actions-as-permissions
        - PolicyName: CloudWatchLogDeliveryRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:ListLogDeliveries
                  - logs:GetLogDelivery
                Resource: "*"
        - PolicyName: CloudWatchLogDeliveryWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                Resource: "*"
        - PolicyName: CloudWatchLogsCreateLogGroupIfDeleted
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !GetAtt StepFnLogGrp.Arn

        - PolicyName: CloudWatchLogsWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StepFnLogGrp}:log-stream:*"
                # ${StepFnLogGrp.Arn} ends with :* instead of allowing us to
                # append :log-stream:* to make a log stream ARN

        - PolicyName: RdsRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                Resource: "*"
              - Effect: Allow
                Action: rds:ListTagsForResource
                Resource:
                  - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"
                  - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*"

        # JSON, because CloudFormation requires literal string keys.
        # !Sub "aws:ResourceTag/${TagKey}": "*"
        # would give an "Unhashable type" error.
        # Empty "Condition": {} is OK.
        - PolicyName: RdsWrite
          PolicyDocument: !Sub
            - >-
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "rds:StopDBInstance",
                    "rds:StopDBCluster"
                  ],
                  "Resource": [
                    "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*",
                    "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*"
                  ],
                  "Condition": {
              ${TagConditions}
                  }
                }]
              }
            - TagConditions: !Join
                - |
                  ,
                - - !If
                    - ExcludeTagKeySet
                    - !Sub |-
                        "StringNotLike": {
                          "aws:ResourceTag/${ExcludeTagKey}": "*"
                        }
                    - !Ref AWS::NoValue
                  - !If
                    - IncludeTagKeySet
                    - !Sub |-
                        "StringLike": {
                          "aws:ResourceTag/${IncludeTagKey}": "*"
                        }
                    - !Ref AWS::NoValue

        # https://docs.aws.amazon.com/step-functions/latest/dg/encryption-at-rest.html#encrypt-logs
        - Fn::If:
            - StepFnKmsKeyBlank
            - !Ref AWS::NoValue
            - PolicyName: StepFnKmsDecryptForCloudWatchLogsNoteComplementsKeyPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:GenerateDataKey
                    Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${StepFnKmsKey}"
                    Condition:
                      StringEquals:
                        "kms:EncryptionContext:SourceArn":
                          !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                          # No need for StringLike! Per CloudTrail, the literal
                          # EncryptionContext ends in :*

        # https://docs.aws.amazon.com/step-functions/latest/dg/encryption-at-rest.html#create-state-machine
        - Fn::If:
            - StepFnKmsKeyBlank
            - !Ref AWS::NoValue
            - PolicyName: StepFnKmsEncryptDecrypt
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:GenerateDataKey
                      - kms:Decrypt
                    Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${StepFnKmsKey}"
                    Condition:
                      StringEquals:
                        "kms:EncryptionContext:aws:states:stateMachineArn":
                          !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-StepFn"
                          # KMS and Step Functions documentation recommends
                          # String operators.
                          # https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-encryption-context
                          # https://docs.aws.amazon.com/step-functions/latest/dg/encryption-at-rest.html#create-state-machine
                          # Documentation for some other services recommends
                          # Arn operators.
                          # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html#cmk-permissions

  # https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#cloudwatch-iam-policy
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-logs-infrastructure-CWL
  StepFnLogGrpPol:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}LogDeliveryWrite"
      # Considered
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/TemplateReference/intrinsic-function-reference-ToJsonString.html
      # but prefer to avoid a CloudFormation transform, because it would make
      # stack updates difficult.
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": "delivery.logs.amazonaws.com" },
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StepFnLogGrp}:log-stream:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:SourceAccount": "${AWS::AccountId}"
              },
              "ArnLike": {
                "aws:SourceArn": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              }
            }
          }]
        }
      # ${StepFnLogGrp.Arn} ends with :* instead of allowing us to append
      # :log-stream:* to make a log stream ARN

  ErrorQueuePol:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref ErrorQueue ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: RequireTls
            Effect: Deny
            Principal: "*"
            Action: sqs:*
            Resource: "*"
            Condition:
              Bool: { aws:SecureTransport: "false" }
          - Effect: Allow
            Principal: "*"
            Action: sqs:GetQueueAttributes
            Resource: "*"
          - Sid:
              Fn::If:
                - SqsKmsKeyCustom
                - SourceEventRulesNoteKeyPolicyNeedsEventBridgeSqsKmsEncrypt
                - SourceEventRules
            Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sqs:SendMessage
            Resource: "*"
            Condition:
              ArnEquals:
                "aws:SourceArn":
                  - !GetAtt DbForcedStartToStepFnRule.Arn
          - Sid: ExclusiveSources
            Effect: Deny
            Principal: "*"
            Action: sqs:SendMessage
            Resource: "*"
            Condition:
              ArnNotEquals:
                "aws:SourceArn":
                  - !GetAtt DbForcedStartToStepFnRule.Arn

  # https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html#USER_Events.Messages.cluster
  # - RDS-EVENT-0153 "DB cluster is being started due to it exceeding the
  #   maximum allowed time being stopped."
  # - RDS-EVENT-0151 "DB cluster started." (testing)
  #
  # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html#USER_Events.Messages.instance
  # - RDS-EVENT-0154 "DB instance is being started due to it exceeding the
  #   maximum allowed time being stopped."
  # - RDS-EVENT-0088 "DB instance started." (testing)
  #   Warning: Aurora database instances have an event that is
  #   indistinguishable at this level. Step Function ignores it.
  #
  # https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html#USER_Events.Messages.instance

  DbForcedStartToStepFnRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub
        - >-
          Database start:
          forced after 7 days:
          RDS-EVENT-0153 (Aurora cluster),
          RDS-EVENT-0154 (RDS instance)${TestDescription} to ${StepFn.Name}
        - TestDescription: !If
            - TestTrue
            - >-
              ; non-forced TEMPORARY TESTING:
              RDS-EVENT-0151 (Aurora cluster),
              RDS-EVENT-0088 (instance, ignored for Aurora);
            - ""
      EventPattern: !Sub
        - >-
          {
            "version": [ "0" ],
            "source": [ "aws.rds" ],
            "detail": {
              "SourceIdentifier": [ { "anything-but": [ "" ] } ],
              "Date": [ { "anything-but": [ "" ] } ]${DetailTagsKey}
            },
            "$or": [
              {
                "detail-type": [ "RDS DB Cluster Event" ],
                "detail": {
                  "SourceType": [ "CLUSTER" ],
                  "EventID": [ "RDS-EVENT-0153"${AuroraTestEvent} ]
                }
              },
              {
                "detail-type": [ "RDS DB Instance Event" ],
                "detail": {
                  "SourceType": [ "DB_INSTANCE" ],
                  "EventID": [ "RDS-EVENT-0154"${RdsTestEvent} ]
                }
              }
            ]
          }
        - AuroraTestEvent: !If [ TestTrue, ', "RDS-EVENT-0151"', "" ]
          RdsTestEvent: !If [ TestTrue, ', "RDS-EVENT-0088"', "" ]
          DetailTagsKey: !If
            - ExcludeTagKeySetOrIncludeTagKeySet
            - !Sub
              - |-
                  ,
                  "Tags": {
                    ${DetailTagsValue}
                  }
              - DetailTagsValue: !Join
                  - ', '
                  - - !If
                      - ExcludeTagKeySet
                      - !Sub |-
                          "${ExcludeTagKey}": [ { "exists": false } ]
                      - !Ref AWS::NoValue
                    - !If
                      - IncludeTagKeySet
                      - !Sub |-
                          "${IncludeTagKey}": [ { "exists": true } ]
                      - !Ref AWS::NoValue
            - ""
      # Would prefer "anything-but": [ "", null ] . JSON EventPattern resolves:
      # https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/1378
      # but another limitation remains: "Event pattern is not valid. Reason:
      # Inside anything but list, start|null|boolean is not supported."
      # Handy for testing:
      # https://console.aws.amazon.com/events/home#/explore
      Targets:
        - Id: !GetAtt StepFn.Name
          RoleArn: !GetAtt ExecuteStepFnRole.Arn
          Arn: !GetAtt StepFn.Arn
          RetryPolicy:
            MaximumRetryAttempts: 10
            MaximumEventAgeInSeconds: 300  # 5 minutes
          DeadLetterConfig: { Arn: !GetAtt ErrorQueue.Arn }
      State: !If [ EnableTrue, ENABLED, DISABLED ]

  ErrorQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      SqsManagedSseEnabled: !If [ SqsKmsKeyBlank, true, false ]
      KmsMasterKeyId:
        Fn::If:
          - SqsKmsKeyBlank
          - !Ref AWS::NoValue
          - Fn::If:
              - SqsKmsKeyCustom
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${SqsKmsKey}"
              - !Ref SqsKmsKey
      KmsDataKeyReusePeriodSeconds:
        !If [ SqsKmsKeyBlank, !Ref AWS::NoValue, 86400 ]  # seconds (24 hours)
      MaximumMessageSize: !Ref MaximumMessageSizeBytes
      MessageRetentionPeriod: !Ref MessageRetentionPeriodSeconds
      ReceiveMessageWaitTimeSeconds: 20  # Long polling (lowest cost)
      VisibilityTimeout: 0  # seconds; dead message retries don't make sense

  StepFnLogGrp:
    Type: AWS::Logs::LogGroup
    Properties:
      # https://docs.aws.amazon.com/step-functions/latest/dg/sfn-best-practices.html#bp-cwl
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}-StepFnLogGrp"
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId:
        Fn::If:
          - CloudWatchLogsKmsKeyBlank
          - !Ref AWS::NoValue
          - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${CloudWatchLogsKmsKey}"

  StepFn:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: StepFnLogGrpPol
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-StepFn"
      # N.B.: If CloudFormation determines StateMachineName, it does not
      # prefix the logical name with "StackName-", the way it does for most
      # other resource types. Overriding StateMachineName gives a known ARN,
      # allowing for stricter IAM policies, but does complicate updates that
      # require replacement.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/TemplateReference/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename
      EncryptionConfiguration:
        Fn::If:
          - StepFnKmsKeyBlank
          -
            Type: AWS_OWNED_KEY
          -
            Type: CUSTOMER_MANAGED_KMS_KEY
            KmsKeyId: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${StepFnKmsKey}"
            KmsDataKeyReusePeriodSeconds: 900  # Maximum (lowest cost)
      LoggingConfiguration:
        IncludeExecutionData: !Ref IncludeExecutionDataInLog
        Level: !Ref LogLevel
        Destinations:
          - CloudWatchLogsLogGroup: { LogGroupArn: !GetAtt StepFnLogGrp.Arn }
      TracingConfiguration: { Enabled: false }
      RoleArn: !GetAtt StepFnRole.Arn
      StateMachineType: STANDARD
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Stop AWS RDS and Aurora databases after the forced 7th-day start",
            "QueryLanguage": "JSONata",
            "TimeoutSeconds": ${StepFnTimeoutSeconds},
            "StartAt": "AssignConstantExtractDbIdentifierFromEvent",
            "States": {
              "AssignConstantExtractDbIdentifierFromEvent": {
                "Type": "Pass",
                "Assign": {
                  "Constant": "{% {\n  'StepFnTaskTimeoutSeconds': ${StepFnTaskTimeoutSeconds},\n  'StepFnWaitSeconds': ${StepFnWaitSeconds},\n  'StepFnTimeoutMilliseconds': ${StepFnTimeoutSeconds} * 1000\n} %}"
                },
                "Comment": "Process JSON state machine definition with CloudFormation Fn::Sub to resolve parameters",
                "Output": "{% {\n  'Event': $states.input,\n  'Date': $states.input.detail.Date,\n  'SourceIdentifier': $states.input.detail.SourceIdentifier,\n  'SourceType': $states.input.detail.SourceType,\n  'DbStatus': ''\n} %}",
                "Next": "Wait"
              },
              "Wait": {
                "Type": "Wait",
                "Seconds": "{% $Constant.StepFnWaitSeconds %}",
                "Output": "{% $states.input ~> |$|{'DbStatus': ''}, ['Error', 'Cause']| %}",
                "Comment": "Clears possibly-stale status and deletes any past error",
                "Next": "IfEventNotExpiredChooseClusterOrInstance"
              },
              "IfEventNotExpiredChooseClusterOrInstance": {
                "Type": "Choice",
                "Choices": [

                  {
                    "Condition": "{% $toMillis($states.input.Date) < ($millis() - $Constant.StepFnTimeoutMilliseconds) %}",
                    "Output": "{% $states.input ~> |$|{'Error': $states.context.State.Name & '.' & 'EventExpired'}| /* https://docs.jsonata.org/other-operators#-------transform */ %}",
                    "Next": "Fail"
                  },
                  {
                    "Condition": "{% 'CLUSTER' = $states.input.SourceType %}",
                    "Next": "StopDBCluster"
                  },
                  {
                    "Condition": "{% 'DB_INSTANCE' = $states.input.SourceType %}",
                    "Next": "StopDBInstance"
                  }
                ]
              },
              "StopDBCluster": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:rds:stopDBCluster",
                "Arguments": "{% {'DbClusterIdentifier': $states.input.SourceIdentifier} %}",
                "TimeoutSeconds": "{% $Constant.StepFnTaskTimeoutSeconds %}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "Rds.InvalidDbClusterStateException"
                    ],
                    "Output": "{% \n  $states.input\n  ~> |$|{'DbStatus': ''}|\n  ~> |$|{'DbStatus': $lowercase($match($states.errorOutput.Cause, /^DbCluster [^ ]+ is in (.+) state/, 1).groups[0])}|\n  ~> |$|$.DbStatus ? {} : $states.errorOutput|\n  ~> |$|$.DbStatus ? {} : {'Error': $states.context.State.Name & '.' & $.Error & '.CannotParseException'}|\n %}",
                    "Next": "DbStatus"
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Comment": "Includes Rds.InvalidDbInstanceStateException, which occurs until each cluster member becomes available",
                    "Output": "{% $states.input ~> |$|$states.errorOutput| ~> |$|{'Error': $states.context.State.Name & '.' & $.Error}| %}",
                    "Next": "Wait"
                  }
                ],
                "Output": "{% $states.input %}",
                "Next": "${StopDBNextStateName}"
              },
              "StopDBInstance": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:rds:stopDBInstance",
                "Arguments": "{% {'DbInstanceIdentifier': $states.input.SourceIdentifier} %}",
                "TimeoutSeconds": "{% $Constant.StepFnTaskTimeoutSeconds %}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "Rds.InvalidDbInstanceStateException"
                    ],
                    "Output": "{% $states.input ~> |$|$states.errorOutput| ~> |$|{'Error': $states.context.State.Name & '.' & $.Error}| %}",
                    "Next": "DescribeDBInstances"
                  },
                  {
                    "ErrorEquals": [
                      "Rds.RdsException"
                    ],
                    "Output": "{% $states.input ~> |$|$states.errorOutput| ~> |$|{'Error': $states.context.State.Name & '.' & $.Error}| %}",
                    "Comment": "Next state uses Cause key of stashed errorOutput",
                    "Next": "AuroraDbInstanceNotEligibleForStopping?"
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Output": "{% $states.input ~> |$|$states.errorOutput| ~> |$|{'Error': $states.context.State.Name & '.' & $.Error}| %}",
                    "Next": "Wait"
                  }
                ],
                "Output": "{% $states.input %}",
                "Next": "${StopDBNextStateName}"
              },
              "DescribeDBInstances": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
                "Arguments": "{% {'DbInstanceIdentifier': $states.input.SourceIdentifier} %}",
                "TimeoutSeconds": "{% $Constant.StepFnTaskTimeoutSeconds %}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Output": "{% $states.input ~> |$|$states.errorOutput| ~> |$|{'Error': $states.context.State.Name & '.' & $.Error}| %}",
                    "Next": "Wait"
                  }
                ],
                "Output": "{% \n  $states.input\n  ~> |$|{'DbStatus': ''}|\n  ~> |$|{'DbStatus': $lowercase($states.result.DbInstances[0].DbInstanceStatus)}|\n  ~> |$|$.DbStatus ? {} : {'Error': $states.context.State.Name & '.CannotParseResult', 'Cause': $string($states.result)}|\n %}",
                "Next": "DbStatus"
              },
              "DbStatus": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Condition": "{% $states.input.DbStatus in ['inaccessible-encryption-credentials', 'cloning-failed', 'migration-failed', 'preparing-data-migration', 'failed', 'incompatible-restore', 'insufficient-capacity', 'restore-error', 'storage-full'] %}",
                    "Output": "{% $states.input ~> |$|{'Error': $states.context.State.Name & '.CannotContinue'}| %}",
                    "Next": "Fail"
                  },
                  {
                    "Condition": "{% $states.input.DbStatus in [${DbStatusStoppingLeadingArrayItem}'stopped', 'deleting', 'deleted'] %}",
                    "Next": "Succeed"
                  }
                ],
                "Default": "Wait"
              },
              "AuroraDbInstanceNotEligibleForStopping?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Condition": "{% $contains($states.input.Cause, 'aurora') and $contains($states.input.Cause, 'not eligible for stopping') %}",
                    "Comment": "Aurora: stop cluster, not instances. This InvalidParameterCombination occurs only in test mode. RDS-EVENT-0088 database instance non-forced start is indistinguishable for RDS (accepted) and Aurora (ignored in favor of RDS-EVENT-0151 for cluster).",
                    "Output": "{% $states.input ~> |$|{'Info': 'StopAuroraClusterNotInstances'}| %}",
                    "Next": "Succeed"
                  }
                ],
                "Default": "Wait"
              },
              "Fail": {
                "Type": "Fail"
              },
              "Succeed": {
                "Type": "Succeed",
                "Output": "{% $states.input ~> |$|{}, ['Error', 'Cause']| %}",
                "Comment": "Deletes any past error"
              }
            }
          }
        - StopDBNextStateName: !If
            - FollowUntilStoppedTrue
            - Wait
            - Succeed
          DbStatusStoppingLeadingArrayItem: !If
            - FollowUntilStoppedTrue
            - ""
            - "'stopping', "
